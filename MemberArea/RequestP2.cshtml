@{
    WebSecurity.RequireAuthenticatedUser();
    if (Roles.IsUserInRole(WebSecurity.CurrentUserName, "Super Admin") || Roles.IsUserInRole(WebSecurity.CurrentUserName, "Manager") || Roles.IsUserInRole(WebSecurity.CurrentUserName, "Librarian") || Roles.IsUserInRole(WebSecurity.CurrentUserName, "Library Users") )
    {} else {
        Response.Redirect("~/Error/Forbidden.cshtml");
    }
    Layout = "~/_MemberLayout.cshtml";

    // Initialize general page variables
    var quantity = 0;
    var dateneeded = "";
    var purpose = "";
    var message = "";

    //setup validation
    Validation.RequireField("dateneeded", "You must specify a date.");
    Validation.RequireField("purpose", "This field is required.");

    //if this is a POST request, validate and process data
    if (IsPost && Request.Form["add"] != null)
    {
        AntiForgery.Validate();
        quantity = Convert.ToInt32(Request.Form["Quantity"]);
        dateneeded = Request.Form["DateNeeded"];
        purpose = Request.Form["Purpose"];

        // If all information is valid, create a new account
        if (Validation.IsValid())
        {
            // Insert a new beta into the database
            var db = Database.Open("StarterSite");
            var namestring = "SELECT * FROM UserProfile WHERE UserId = @0";
            var qstring = db.Query(namestring,WebSecurity.CurrentUserId);

            // insert beta into the P2 Table
            db.Execute("INSERT INTO P2Request (Quantity,DateNeeded,Purpose,MemberID) VALUES (@0,@1,@2,@3)", quantity, dateneeded, purpose, WebSecurity.CurrentUserId);
            message += "You have successfully requested the ff. <br /><br />";
            message += "P2 Drives: " + @quantity + "<br />";
            message += "Date needed: " + @dateneeded + "<br />";
            message += "Purpose: " + @purpose;

            Response.Redirect("~/MemberArea/Messages.cshtml?message=" + message);


        }

    }
}


<script type="text/javascript" src="//cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.js"></script>
<link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.css" />


<script type="text/javascript">
$(function() {
    $(".datedate").daterangepicker({
        singleDatePicker: true,
        showDropdowns: true
    });
});

</script>

<form method="post">
    <div class="col-lg-12 text-left">
        <ul class="breadcrumb">
            <li><a href="~/MemberArea/Dashboard.cshtml">Dashboard</a></li>
            <li class="active">Request P2 Drive</li>
        </ul>
    </div>
    <div class="form-horizontal col-lg-8">

        <div class="form-group">
            <div class="col-md-4 control-label">
                <label for="Quantity" @if (!ModelState.IsValidField("P2Number")) { <text> class="error-label" </text>       }>Quantity</label>
            </div>
            <div class="col-md-2">
                <select class="form-control" id="Quantity" name="Quantity" @Validation.For("Quantity")>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                    <option value="6">6</option>
                </select>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4 control-label">
                <label for="DateNeeded" @if (!ModelState.IsValidField("DateNeeded")) { <text> class="error-label" </text>        }>DateNeeded</label>
            </div>
            <div class="col-md-3">
                <input class="form-control datedate" type="text" id="DateNeeded" name="DateNeeded" @Validation.For("DateNeeded") />
                <div class="text-danger">
                    @* Write any user name validation errors to the page *@
                    @Html.ValidationMessage("DateNeeded")
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4 control-label">
                <label for="Purpose" @if (!ModelState.IsValidField("Purpose")) { <text> class="error-label" </text>   }>Purpose</label>
            </div>
            <div class="col-md-6">
                <textarea class="form-control" id="Purpose" name="Purpose" rows="4" cols="20" @Validation.For("Purpose")></textarea>
                <div class="text-danger">
                    @* Write any user name validation errors to the page *@
                    @Html.ValidationMessage("Purpose")
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-lg-10 col-lg-offset-5">
                <a href="~/MemberArea/Dashboard.cshtml" class="btn btn-default">Cancel</a>
                <input id="submit" type="submit" class="btn btn-primary" value="Submit" name="add" />
            </div>
        </div>

        <br />
        <div class="form-group">
            <div class="col-md-3"></div>
            <div class="col-md-9 text-danger">
                @AntiForgery.GetHtml()
                @* If at least one validation error exists, notify the user *@
                @Html.ValidationSummary("Add Beta was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)
            </div>
        </div>
    </div>
</form>