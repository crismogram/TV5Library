@{
    WebSecurity.RequireAuthenticatedUser();
    if (Roles.IsUserInRole(WebSecurity.CurrentUserName, "Super Admin") || Roles.IsUserInRole(WebSecurity.CurrentUserName, "Manager") || Roles.IsUserInRole(WebSecurity.CurrentUserName, "Librarian") || Roles.IsUserInRole(WebSecurity.CurrentUserName, "Library Users") )
    {} else {
        Response.Redirect("~/Error/Forbidden.cshtml");
    }
    Layout = "~/_MemberLayout.cshtml";

    // Initialize general page variables
    var subject = "";
    var dateneeded = "";
    var betanumbers = "";
    var purpose = "";
    var message = "";
    var hiddenclass = "";

    //setup validation
    Validation.RequireField("subject", "You must specify a topic/subject/event.");
    Validation.RequireField("dateneeded", "You must specify a date.");
    Validation.RequireField("purpose", "This field is required.");


    //if this is a POST request, validate and process data
    if (IsPost && Request.Form["add"] != null && hiddenclass == "")
    {
        AntiForgery.Validate();
        subject = Request.Form["Subject"];
        dateneeded = Request.Form["DateNeeded"];
        betanumbers = Request.Form["BetaNumbers"];
        purpose = Request.Form["Purpose"];

        // If all information is valid, create a new account
        if (Validation.IsValid())
        {
            // Insert a new beta into the database
            var db = Database.Open("StarterSite");

            // insert beta into the P2 Table
            db.Execute("INSERT INTO BetaRequest (Subject,DateNeeded,Purpose,BetaNumbers,MemberID) VALUES (@0,@1,@2,@3,@4)", subject, dateneeded, purpose,betanumbers, WebSecurity.CurrentUserId);
            message += "Beta Tapes with the ff. attributes has been succesfully requested. <br /><br />";
            message += "Subject: " + @subject + "<br />";
            message += "Date needed: " + @dateneeded + "<br />";
            message += "Purpose: " + @purpose + "<br />";
            message += "Beta numbers: " + @betanumbers;

            Response.Redirect("~/MemberArea/Messages.cshtml?message=" + message);
        }
    }
}


<script type="text/javascript" src="//cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.js"></script>
<link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/bootstrap.daterangepicker/2/daterangepicker.css" />


<script type="text/javascript">
$(function() {
    $(".datedate").daterangepicker({
        singleDatePicker: true,
        showDropdowns: true
    });
});

</script>

<form method="post">
    <div class="col-lg-12 text-left">
        <ul class="breadcrumb">
            <li><a href="~/MemberArea/Dashboard.cshtml">Dashboard</a></li>
            <li class="active">Request Beta Tapes</li>
        </ul>
    </div>

    <div class="form-horizontal col-lg-8">

        <div class="form-group">
            <div class="col-md-4 control-label">
                <label for="Subject" @if (!ModelState.IsValidField("Subject")) { <text> class="error-label" </text>        }>Topic/Subject/Event</label>
            </div>
            <div class="col-md-6">
                 <input class="form-control" type="text" id="Subject" name="Subject" @Validation.For("Subject") />
                <div class="text-danger">
                    @* Write any user name validation errors to the page *@
                    @Html.ValidationMessage("Subject")
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4 control-label">
                <label for="DateNeeded" @if (!ModelState.IsValidField("DateNeeded")) { <text> class="error-label" </text>         }>DateNeeded</label>
            </div>
            <div class="col-md-3">
                <input class="form-control datedate" type="text" id="DateNeeded" name="DateNeeded" @Validation.For("DateNeeded") />
                <div class="text-danger">
                    @* Write any user name validation errors to the page *@
                    @Html.ValidationMessage("DateNeeded")
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4 control-label">
                <label for="BetaNumbers">Beta Numbers(optional)</label>
            </div>
            <div class="col-md-6">
                 <input class="form-control" type="text" id="BetaNumbers" name="BetaNumbers" placeholder="separated by commas"/>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-4 control-label">
                <label for="Purpose" @if (!ModelState.IsValidField("Purpose")) { <text> class="error-label" </text>    }>Purpose</label>
            </div>
            <div class="col-md-6">
                <textarea class="form-control" id="Purpose" name="Purpose" rows="4" cols="20" @Validation.For("Purpose")></textarea>
                <div class="text-danger">
                    @* Write any user name validation errors to the page *@
                    @Html.ValidationMessage("Purpose")
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-lg-10 col-lg-offset-5">
                <a href="~/MemberArea/Dashboard.cshtml" class="btn btn-default">Cancel</a>
                <input id="submit" type="submit" class="btn btn-primary" value="Submit" name="add" />
            </div>
        </div>
        <br />
        <div class="form-group">
            <div class="col-md-3"></div>
            <div class="col-md-9 text-danger">
                @AntiForgery.GetHtml()
                @* If at least one validation error exists, notify the user *@
                @Html.ValidationSummary("Add Beta was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)
            </div>
        </div>
    </div>
</form>