@using WebMatrix.WebData

@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    WebSecurity.RequireAuthenticatedUser();
    Layout = "~/_MemberLayout.cshtml";
    var action = Request.Form["action"];
    string successMessage = "";
    var message = Request.QueryString["message"];
    if (message == "ChangedPassword") {
        successMessage = "Your password has been changed.";
    } else if (message == "SetPassword") {
        successMessage = "Your password has been set.";
    } else if (message == "RemovedLogin") {
        successMessage = "The external login was removed.";
    }

    // Setup validation
    Validation.RequireField("currentPassword", "The current password field is required.");
    Validation.Add("currentPassword",
    Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Current password must be at least 6 characters"));

    Validation.RequireField("newPassword", "The new password field is required.");
    Validation.Add("confirmPassword",
        Validator.Required("The confirm new password field is required."),
        Validator.EqualsTo("newPassword", "The new password and confirmation password do not match."));
    Validation.Add("newPassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "New password must be at least 6 characters"));

    if (IsPost)
    {
        AntiForgery.Validate();
        if (action == "Submit")
        {
            // Handle local account password operations
            var currentPassword = Request.Form["currentPassword"];
            var newPassword = Request.Form["newPassword"];
            var confirmPassword = Request.Form["confirmPassword"];

            if (Validation.IsValid())
            {
                if (WebSecurity.ChangePassword(WebSecurity.CurrentUserName, currentPassword, newPassword))
                {
                    Response.Redirect("~/Account/Manage?message=ChangedPassword");
                    return;
                }
                else
                {
                    ModelState.AddFormError("An error occurred when attempting to change the password. Please contact support.");
                }
            }
            else
            {
                ModelState.AddFormError("Password change was unsuccessful. Please correct the errors and try again.");
            }
        }
    }
}

<form method="post">
    <div class="row">
        <div class="col-lg-3"></div>
        <div class="col-lg-5">
            <div class="form-horizontal">
                <fieldset>
                    <legend class="text-center">Change Password</legend>
                    <div class="form-group">
                        <div class="col-md-5 control-label">
                            <label for="currentPassword" @if (!ModelState.IsValidField("currentPassword")) { <text> class="error-label" </text>  }>Current password</label>
                        </div>
                        <div class="col-md-7">
                            <input class="form-control" type="password" id="currentPassword" name="currentPassword" @Validation.For("currentPassword") />
                            @Html.ValidationMessage("currentPassword")
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-5 control-label">
                            <label for="newPassword" @if (!ModelState.IsValidField("newPassword")) { <text> class="error-label" </text>   }>New password</label>
                        </div>
                        <div class="col-md-7">
                            <input class="form-control" type="password" id="newPassword" name="newPassword" @Validation.For("newPassword") />
                            @Html.ValidationMessage("newPassword")
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-5 control-label">
                            <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) { <text> class="error-label" </text>    }>Confirm New password</label>
                        </div>
                        <div class="col-md-7">
                            <input class="form-control" type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
                            @Html.ValidationMessage("confirmPassword")
                        </div>
                    </div>
                        
                    <div class="form-group">
                        <div class="col-md-4 control-label"></div>
                        <div class="col-md-4">
                            <a href="~/MemberArea/Dashboard.cshtml" class="btn btn-default">Return to Dashboard</a>
                        </div>
                        <div class="col-md-4">
                            <input id="submitbutton" type="submit" class="btn btn-primary" name="action" value="Submit" />
                        </div>
                    </div>

                    <br />
                    <div class="form-group">
                        <div class="col-md-12 text-danger text-center">
                            @AntiForgery.GetHtml()
                            @Html.ValidationSummary(excludeFieldErrors: true)
                        </div>
                        <div class="col-md-12 text-success text-center">
                            @if (!successMessage.IsEmpty())
                            {
                                <p class="message-success">
                                    @successMessage
                                </p>
                            }
                        </div>

                    </div>
                </fieldset>
            </div>
        </div>
    </div>
</form>







