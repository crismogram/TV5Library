@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Scripts/jquery.maskedinput.js"></script>
    <script>
        jQuery(function ($) {
            $("#mobilenumber").mask("(999) 999-9999");
        });
    </script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Register";

    // Initialize general page variables
    var employeenumber = "";
    var firstname = "";
    var middlename = "";
    var lastname = "";
    var mobilenumber = "";
    var email = "";
    var password = "";
    var confirmPassword = "";

    // Setup validation

    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("employeenumber", "You must specify your employee number.");
    Validation.RequireField("password", "Password cannot be blank.");
    Validation.RequireField("firstname", "You must specify first name.");
    Validation.RequireField("middlename", "You must specify middle name.");
    Validation.RequireField("lastname", "You must specify last name.");
    Validation.RequireField("mobilenumber", "You must specify mobile number.");
    Validation.Add("confirmPassword",
Validator.EqualsTo("password", "Password and confirmation password do not match."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();
        email = Request.Form["email"];
        employeenumber = Request.Form["employeenumber"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];
        firstname = Request.Form["firstname"].ToUpper();
        middlename = Request.Form["middlename"].ToUpper();
        lastname = Request.Form["lastname"].ToUpper();
        mobilenumber = Request.Form["mobilenumber"].ToUpper();

        // If all information is valid, create a new account
        if (Validation.IsValid()) {
            // Insert a new user into the database
            var db = Database.Open("StarterSite");

            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            // Check if Employee Number is duplicate
            var eid = db.QuerySingle("SELECT EmployeeNumber FROM UserProfile WHERE EmployeeNumber = @0", employeenumber);
            if (user == null) {
                
                if(eid == null){
                    // Insert email into the profile table
                    db.Execute("INSERT INTO UserProfile (Email,FirstName,MiddleName,LastName,MobileNumber,EmployeeNumber) VALUES (@0,@1,@2,@3,@4,@5)", email,firstname,middlename,lastname,mobilenumber,employeenumber);

                    // Create and associate a new entry in the membership database.
                    // If successful, continue processing the request
                    try {
                        bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                        var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                        if (requireEmailConfirmation) {
                            var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                            var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                            WebMail.Send(
                                to: email,
                                subject: "Please confirm your account",
                                body: "Click this <a href=\"" + confirmationUrl + "\">" + "here" + "</a> to activate your account."
                            );
                        }

                        if (requireEmailConfirmation) {
                            // Thank the user for registering and let them know an email is on its way
                            Response.Redirect("~/Account/Thanks");
                        } else {
                            // Navigate back to the homepage and exit
                            WebSecurity.Login(email, password);

                            Response.Redirect("~/");
                        }
                    } catch (System.Web.Security.MembershipCreateUserException e) {
                        ModelState.AddFormError(e.Message);
                    }
                } else  {
                    // Employee Number already exists
                    ModelState.AddFormError("Employee Number already exists.");
                }

            } else {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}



<br />
<form method="post">


    <div class="row">
        <div class="col-lg-3"></div>
        <div class="col-lg-5">
            <div class="form-horizontal">
                <fieldset>
                    <legend class="text-center">Register</legend>

                    <div class="form-group">
                        <div class="col-md-4 control-label">
                            <label for="employeenumber" @if (!ModelState.IsValidField("employeenumber")) { <text> class="error-label" </text>   }>Employee Number</label>
                        </div>
                        <div class="col-md-3">
                            <input class="form-control" type="text" id="employeenumber" name="employeenumber" @Validation.For("employeenumber") />
                            <div class="text-danger">
                                @* Write any user name validation errors to the page *@
                                @Html.ValidationMessage("employeenumber")
                            </div>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-4 control-label">
                            <label for="firstname" @if (!ModelState.IsValidField("firstname")) { <text> class="error-label" </text>   }>First Name</label>
                        </div>
                        <div class="col-md-5">
                            <input class="form-control" type="text" id="firstname" name="firstname" @Validation.For("firstname") />
                            <div class="text-danger">
                                @* Write any user name validation errors to the page *@
                                @Html.ValidationMessage("firstname")
                            </div>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-4 control-label">
                            <label for="middlename" @if (!ModelState.IsValidField("middlename")) { <text> class="error-label" </text>    }>Middle Name</label>
                        </div>
                        <div class="col-md-5">
                            <input class="form-control" type="text" id="middlename" name="middlename" @Validation.For("middlename") />
                            <div class="text-danger">
                                @* Write any user name validation errors to the page *@
                                @Html.ValidationMessage("middlename")
                            </div>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-4 control-label">
                            <label for="lastname" @if (!ModelState.IsValidField("lastname")) { <text> class="error-label" </text>     }>Last Name</label>
                        </div>
                        <div class="col-md-6">
                            <input class="form-control" type="text" id="lastname" name="lastname" @Validation.For("lastname") />
                            <div class="text-danger">
                                @* Write any user name validation errors to the page *@
                                @Html.ValidationMessage("lastname")
                            </div>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-4 control-label">
                            <label for="mobilenumber" @if (!ModelState.IsValidField("mobilenumber")) { <text> class="error-label" </text>      }>Mobile Number</label>
                        </div>
                        <div class="col-md-6">
                            <input class="form-control" type="text" id="mobilenumber" name="mobilenumber" @Validation.For("mobilenumber") />
                            <div class="text-danger">
                                @* Write any user name validation errors to the page *@
                                @Html.ValidationMessage("mobilenumber")
                            </div>

                        </div>
                    </div>


                    <div class="form-group">
                        <div class="col-md-4 control-label">
                            <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text>  }>Email address</label>
                        </div>
                        <div class="col-md-8">
                            <input class="form-control" type="text" id="email" name="email" value="@email" @Validation.For("email") />
                            <div class="text-danger">
                                @* Write any user name validation errors to the page *@
                                @Html.ValidationMessage("email")
                            </div>

                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-4 control-label">
                            <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text>  }>Password</label>
                        </div>
                        <div class="col-md-6">
                            <input class="form-control" type="password" id="password" name="password" @Validation.For("password") />
                            <div class="text-danger">
                                @* Write any password validation errors to the page *@
                                @Html.ValidationMessage("password")
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-4 control-label">
                            <label for="confirmpassword" @if (!ModelState.IsValidField("confirmpassword")) { <text> class="error-label" </text>   }>Confirm Password</label>
                        </div>
                        <div class="col-md-6">
                            <input class="form-control" type="password" id="confirmpassword" name="confirmpassword" @Validation.For("confirmpassword") />
                            <div class="text-danger">
                                @* Write any password validation errors to the page *@
                                @Html.ValidationMessage("confirmpassword")
                            </div>
                        </div>
                    </div>


                    <div class="form-group">
                        <div class="col-md-4 control-label"></div>
                        <div class="col-md-4">
                            <input id="submitbutton" type="submit" class="btn btn-default" />
                        </div>
                    </div>


                    <br />
                    <div class="form-group">
                        <div class="col-md-2"></div>
                        <div class="col-md-10 text-danger">
                            @AntiForgery.GetHtml()
                            @* If at least one validation error exists, notify the user *@
                            @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)
                        </div>
                    </div>

                </fieldset>
            </div>
        </div>
    </div>

</form>